---
export const prerender = true
import '../../styles/global.css'
import Layout from '../../layouts/Layout.astro'
import Header from '../../components/Header.astro'
import Footer from '../../components/Footer.astro'
import { getCollection } from 'astro:content'

export async function getStaticPaths() {
  const portfolioEntries = await getCollection('portfolio')
  return portfolioEntries.map(entry => ({
    params: { slug: entry.id.replace(/\.mdx?$/, '') },
    props: { entry }
  }))
}

const { entry } = Astro.props
const { Content } = await entry.render()
const project = entry.data

// Format date
const formattedDate = project.date.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
})
---

<Layout
  title={`${project.title} | Portfolio | Vikshan Pixels`}
  description={project.shortDescription}
  image={project.coverImage}
>
  <Header />

  <article class='px-3 py-20'>
    <div class='mx-auto max-w-5xl'>
      <!-- Back Button -->
      <div class='mb-8'>
        <a
          href='/portfolio'
          class='inline-flex items-center gap-2 border-2 border-black bg-white px-4 py-2 transition-all duration-200 hover:shadow-[4px_4px_0px_rgba(0,0,0,0.3)]'
        >
          <i class='ri-arrow-left-line'></i>
          Back to Portfolio
        </a>
      </div>

      <!-- Project Header -->
      <div class='mb-10'>
        <div class='mb-4 flex items-center gap-3'>
          <span class='bg-yellow border-2 border-black px-3 py-1 text-sm font-bold text-black'>
            {project.category}
          </span>
          {
            project.featured && (
              <span class='border-2 border-black bg-white px-3 py-1 text-sm font-bold text-black'>
                FEATURED
              </span>
            )
          }
          <span class='text-gray-600'>{formattedDate}</span>
        </div>

        <h1 class='mb-4 text-5xl font-bold'>{project.title}</h1>

        <div class='mb-6 flex flex-wrap gap-6 text-lg'>
          <div>
            <span class='font-bold'>Client:</span>
            {project.client}
          </div>
          <div>
            <span class='font-bold'>Duration:</span>
            {project.duration}
          </div>
        </div>

        <!-- Full description from markdown content -->
        <div class='prose prose-lg max-w-3xl text-gray-700'>
          <Content />
        </div>
      </div>

      <!-- Services Provided -->
      <div class='mb-10 border-2 border-black bg-white p-6'>
        <h2 class='mb-4 text-2xl font-bold'>Services Provided</h2>
        <div class='flex flex-wrap gap-3'>
          {
            project.services.map(service => (
              <span class='border-2 border-black bg-white px-4 py-2 font-medium'>{service}</span>
            ))
          }
        </div>
      </div>

      <!-- Gallery -->
      <div class='mb-10'>
        <h2 class='mb-6 text-3xl font-bold'>Gallery</h2>
        <div id='gallery' class='grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3'>
          {
            project.gallery.map((image, index) => (
              <button
                data-index={index}
                class='gallery-item h-[300px] w-full cursor-pointer overflow-hidden border-2 border-black transition-all duration-200 hover:shadow-[4px_4px_0px_rgba(0,0,0,0.3)]'
              >
                <img
                  src={image}
                  alt={`${project.title} - Photo ${index + 1}`}
                  class='h-full w-full object-cover'
                  loading='lazy'
                />
              </button>
            ))
          }
        </div>
      </div>

      <!-- Video Embed (if available) -->
      {
        project.videoUrl && (
          <div class='mb-10'>
            <h2 class='mb-6 text-3xl font-bold'>Video</h2>
            <div class='aspect-video border-3 border-black'>
              <iframe src={project.videoUrl} class='h-full w-full' allowfullscreen />
            </div>
          </div>
        )
      }

      <!-- Testimonial -->
      {
        project.testimonial && (
          <div class='mb-10 border-2 border-black bg-white p-8 shadow-[6px_6px_0px_rgba(0,0,0,0.3)]'>
            <i class='ri-double-quotes-l mb-4 block text-4xl' />
            <p class='mb-4 text-xl'>{project.testimonial.text}</p>
            <p class='font-bold'>â€” {project.testimonial.author}</p>
          </div>
        )
      }

      <!-- CTA -->
      <div class='bg-yellow border-3 border-black p-10 text-center'>
        <h3 class='mb-4 text-3xl font-bold'>
          Love what you see? Let's create something amazing together!
        </h3>
        <div class='flex flex-wrap justify-center gap-4'>
          <a
            href='/booking'
            class='inline-block border-3 border-black bg-black px-8 py-3 font-bold text-white transition-all duration-200 hover:shadow-[4px_4px_0px_rgba(0,0,0,0.3)]'
          >
            Book a Session
          </a>
          <a
            href='/portfolio'
            class='inline-block border-3 border-black bg-white px-8 py-3 font-bold text-black transition-all duration-200 hover:shadow-[4px_4px_0px_rgba(0,0,0,0.3)]'
          >
            View More Projects
          </a>
        </div>
      </div>
    </div>
  </article>

  <Footer />
</Layout>

<!-- Lightbox Modal -->
<div
  id='lightbox'
  class='bg-opacity-90 fixed inset-0 z-50 flex hidden items-center justify-center bg-black p-4'
>
  <button
    id='closeLightbox'
    class='hover:text-yellow absolute top-4 right-4 z-10 text-4xl text-white'
  >
    <i class='ri-close-line'></i>
  </button>

  <button id='prevImage' class='hover:text-yellow absolute left-4 text-4xl text-white'>
    <i class='ri-arrow-left-s-line'></i>
  </button>

  <button id='nextImage' class='hover:text-yellow absolute right-4 text-4xl text-white'>
    <i class='ri-arrow-right-s-line'></i>
  </button>

  <img
    id='lightboxImage'
    src=''
    alt=''
    class='max-h-[90vh] max-w-full border-4 border-white object-contain'
  />

  <div id='imageCounter' class='absolute bottom-4 text-lg text-white'></div>
</div>

<style>
  .bg-yellow {
    background-color: var(--yellow);
  }

  #lightbox {
    backdrop-filter: blur(10px);
  }
</style>

<script define:vars={{ gallery: project.gallery }}>
  const lightbox = document.getElementById('lightbox')
  const lightboxImage = document.getElementById('lightboxImage')
  const imageCounter = document.getElementById('imageCounter')
  const closeLightbox = document.getElementById('closeLightbox')
  const prevImage = document.getElementById('prevImage')
  const nextImage = document.getElementById('nextImage')
  const galleryItems = document.querySelectorAll('.gallery-item')

  let currentIndex = 0

  function showImage(index) {
    currentIndex = index
    if (lightboxImage) {
      lightboxImage.src = gallery[currentIndex]
      lightboxImage.alt = `Gallery image ${currentIndex + 1}`
    }
    if (imageCounter) {
      imageCounter.textContent = `${currentIndex + 1} / ${gallery.length}`
    }
  }

  function openLightbox(index) {
    showImage(index)
    lightbox?.classList.remove('hidden')
    lightbox?.classList.add('flex')
    document.body.style.overflow = 'hidden'
  }

  function closeLightboxFn() {
    lightbox?.classList.add('hidden')
    lightbox?.classList.remove('flex')
    document.body.style.overflow = 'auto'
  }

  // Gallery item clicks
  galleryItems.forEach(item => {
    item.addEventListener('click', () => {
      const index = parseInt(item.getAttribute('data-index') || '0')
      openLightbox(index)
    })
  })

  // Close button
  closeLightbox?.addEventListener('click', closeLightboxFn)

  // Navigation
  prevImage?.addEventListener('click', () => {
    const newIndex = currentIndex > 0 ? currentIndex - 1 : gallery.length - 1
    showImage(newIndex)
  })

  nextImage?.addEventListener('click', () => {
    const newIndex = currentIndex < gallery.length - 1 ? currentIndex + 1 : 0
    showImage(newIndex)
  })

  // Keyboard navigation
  document.addEventListener('keydown', e => {
    if (!lightbox?.classList.contains('hidden')) {
      if (e.key === 'Escape') closeLightboxFn()
      if (e.key === 'ArrowLeft') prevImage?.click()
      if (e.key === 'ArrowRight') nextImage?.click()
    }
  })

  // Click outside image to close
  lightbox?.addEventListener('click', e => {
    if (e.target === lightbox) closeLightboxFn()
  })
</script>
